// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/thales-e-security/tendermint-hsm-validator/validator (interfaces: Hsm)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	validator "github.com/thales-e-security/tendermint-hsm-validator/validator"
	// manually edited, due to https://github.com/golang/mock/issues/30
	types "github.com/tendermint/tendermint/types"
)

// MockHsm is a mock of Hsm interface
type MockHsm struct {
	ctrl     *gomock.Controller
	recorder *MockHsmMockRecorder
}

// MockHsmMockRecorder is the mock recorder for MockHsm
type MockHsmMockRecorder struct {
	mock *MockHsm
}

// NewMockHsm creates a new mock instance
func NewMockHsm(ctrl *gomock.Controller) *MockHsm {
	mock := &MockHsm{ctrl: ctrl}
	mock.recorder = &MockHsmMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHsm) EXPECT() *MockHsmMockRecorder {
	return m.recorder
}

// GenerateKey mocks base method
func (m *MockHsm) GenerateKey() (validator.Ed25519KeyPair, error) {
	ret := m.ctrl.Call(m, "GenerateKey")
	ret0, _ := ret[0].(validator.Ed25519KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateKey indicates an expected call of GenerateKey
func (mr *MockHsmMockRecorder) GenerateKey() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateKey", reflect.TypeOf((*MockHsm)(nil).GenerateKey))
}

// LoadKeys mocks base method
func (m *MockHsm) LoadKeys(arg0 []byte) error {
	ret := m.ctrl.Call(m, "LoadKeys", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadKeys indicates an expected call of LoadKeys
func (mr *MockHsmMockRecorder) LoadKeys(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadKeys", reflect.TypeOf((*MockHsm)(nil).LoadKeys), arg0)
}

// SignHeartbeat mocks base method
func (m *MockHsm) SignHeartbeat(arg0 string, arg1 *types.Heartbeat) ([]byte, error) {
	ret := m.ctrl.Call(m, "SignHeartbeat", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignHeartbeat indicates an expected call of SignHeartbeat
func (mr *MockHsmMockRecorder) SignHeartbeat(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignHeartbeat", reflect.TypeOf((*MockHsm)(nil).SignHeartbeat), arg0, arg1)
}

// SignProposal mocks base method
func (m *MockHsm) SignProposal(arg0 string, arg1 *types.Proposal) ([]byte, error) {
	ret := m.ctrl.Call(m, "SignProposal", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignProposal indicates an expected call of SignProposal
func (mr *MockHsmMockRecorder) SignProposal(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignProposal", reflect.TypeOf((*MockHsm)(nil).SignProposal), arg0, arg1)
}

// SignVote mocks base method
func (m *MockHsm) SignVote(arg0 string, arg1 *types.Vote) ([]byte, error) {
	ret := m.ctrl.Call(m, "SignVote", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignVote indicates an expected call of SignVote
func (mr *MockHsmMockRecorder) SignVote(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignVote", reflect.TypeOf((*MockHsm)(nil).SignVote), arg0, arg1)
}
